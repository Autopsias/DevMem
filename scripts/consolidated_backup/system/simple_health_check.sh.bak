#!/bin/bash

# Simplified System Health Check Script
# Purpose: Quick health check without complex grep operations

set -euo pipefail

readonly PROJECT_ROOT="$(cd "$(dirname "${BASH_SOURCE[0]}")/../.." && pwd)"

# Colors for output
readonly RED='\033[0;31m'
readonly GREEN='\033[0;32m'
readonly YELLOW='\033[1;33m'
readonly NC='\033[0m'

echo
echo "=== Simple System Health Check ==="
echo "Generated: $(date)"
echo

# Check essential files
check_essential_files() {
    local score=100
    local issues=0
    
    echo "Essential Files Check:"
    
    # Check settings.json
    if [[ -f "$PROJECT_ROOT/.claude/settings.json" ]]; then
        if python -c "import json; json.load(open('$PROJECT_ROOT/.claude/settings.json'))" 2>/dev/null; then
            echo -e "  ${GREEN} settings.json: Valid${NC}"
        else
            echo -e "  ${RED}L settings.json: Invalid JSON${NC}"
            ((issues++))
            ((score -= 30))
        fi
    else
        echo -e "  ${RED}L settings.json: Missing${NC}"
        ((issues++))
        ((score -= 50))
    fi
    
    # Check essential hooks
    if [[ -x "$PROJECT_ROOT/scripts/hooks/essential_security.sh" ]]; then
        echo -e "  ${GREEN} Security hook: Present and executable${NC}"
    else
        echo -e "  ${RED}L Security hook: Missing or not executable${NC}"
        ((issues++))
        ((score -= 25))
    fi
    
    if [[ -x "$PROJECT_ROOT/scripts/hooks/essential_quality.sh" ]]; then
        echo -e "  ${GREEN} Quality hook: Present and executable${NC}"
    else
        echo -e "  ${RED}L Quality hook: Missing or not executable${NC}"
        ((issues++))
        ((score -= 25))
    fi
    
    # Check memory directory
    if [[ -d "$PROJECT_ROOT/.claude/memory" ]]; then
        local file_count=$(find "$PROJECT_ROOT/.claude/memory" -name "*.md" 2>/dev/null | wc -l | tr -d ' ')
        local usage=$(du -sm "$PROJECT_ROOT/.claude/memory" 2>/dev/null | cut -f1 || echo "0")
        echo -e "  ${GREEN} Memory directory: $file_count files, ${usage}MB${NC}"
        
        if [[ $file_count -gt 12 ]]; then
            echo -e "  ${YELLOW}   Many memory files ($file_count), consider cleanup${NC}"
            ((score -= 10))
        fi
        
        if [[ $usage -gt 3 ]]; then
            echo -e "  ${YELLOW}   High memory usage (${usage}MB)${NC}"
            ((score -= 15))
        fi
    else
        echo -e "  ${RED}L Memory directory: Missing${NC}"
        ((issues++))
        ((score -= 20))
    fi
    
    echo "$score:$issues"
}

# Check log health
check_log_health() {
    local score=100
    local issues=0
    
    echo
    echo "Log Health Check:"
    
    local log_files=(
        ".claude/security.log"
        ".claude/quality.log"
        ".claude/memory_maintenance.log"
    )
    
    for log_file in "${log_files[@]}"; do
        if [[ -f "$PROJECT_ROOT/$log_file" ]]; then
            local lines=$(wc -l < "$PROJECT_ROOT/$log_file" 2>/dev/null || echo "0")
            lines=$(echo "$lines" | tr -d ' ')
            if [[ $lines -gt 200 ]]; then
                echo -e "  ${YELLOW}   $(basename "$log_file"): Large ($lines lines)${NC}"
                ((score -= 10))
            else
                echo -e "  ${GREEN} $(basename "$log_file"): $lines lines${NC}"
            fi
        else
            echo -e "  ${YELLOW}   $(basename "$log_file"): Not found${NC}"
        fi
    done
    
    echo "$score:$issues"
}

# Main health check
main() {
    local files_result
    files_result=$(check_essential_files)
    local files_score=$(echo "$files_result" | cut -d: -f1)
    local files_issues=$(echo "$files_result" | cut -d: -f2)
    
    local logs_result  
    logs_result=$(check_log_health)
    local logs_score=$(echo "$logs_result" | cut -d: -f1)
    local logs_issues=$(echo "$logs_result" | cut -d: -f2)
    
    # Calculate overall score (weighted average)
    local total_score=$(( (files_score * 70 + logs_score * 30) / 100 ))
    local total_issues=$((files_issues + logs_issues))
    
    echo
    echo "=== Overall Health Summary ==="
    
    if [[ $total_score -ge 90 ]]; then
        echo -e "${GREEN} System Health: EXCELLENT ($total_score/100)${NC}"
    elif [[ $total_score -ge 75 ]]; then
        echo -e "${YELLOW}=á System Health: GOOD ($total_score/100)${NC}"
    elif [[ $total_score -ge 60 ]]; then
        echo -e "${YELLOW}=à System Health: WARNING ($total_score/100)${NC}"
    else
        echo -e "${RED}=4 System Health: CRITICAL ($total_score/100)${NC}"
    fi
    
    echo "Total Issues: $total_issues"
    
    if [[ $total_issues -gt 0 ]]; then
        echo
        echo "Recommended Actions:"
        echo "  " Run: make memory-maintenance"
        echo "  " Check: make log-summary"
        echo "  " Validate: python scripts/validate_native_config.py"
    fi
    
    echo
    
    # Exit with appropriate code
    if [[ $total_score -lt 60 ]]; then
        exit 2  # Critical
    elif [[ $total_score -lt 70 ]]; then
        exit 1  # Warning
    else
        exit 0  # OK
    fi
}

main "$@"