import pytest
from datetime import datetime
from pathlib import Path
import sys

sys.path.append(str(Path(__file__).parent.parent.parent))

from src.security.vulnerability_scanner import VulnerabilityScanner, SecurityVulnerability, ScanResult

class TestVulnerabilityScanner:
    @pytest.fixture
    def scanner(self) -> VulnerabilityScanner:
        return VulnerabilityScanner()

    def test_code_vulnerability_detection(self, scanner: VulnerabilityScanner):
        test_code = """
def process_payment():
    api_key = "1234567890abcdef"
    secret = "super_secret_value"
    
    query = f"SELECT * FROM users WHERE id = {user_id}"
    result = execute_query(query)
    
    os.system(f"process {user_input}")
"""
        vulnerabilities = scanner.scan_code_file("test.py", test_code)
        
        # Should detect hardcoded secrets
        secret_vulns = [v for v in vulnerabilities if "secret" in v.description.lower()]
        assert len(secret_vulns) >= 2, "Failed to detect hardcoded secrets"
        
        # Should detect SQL injection
        sql_vulns = [v for v in vulnerabilities if "sql injection" in v.description.lower()]
        assert len(sql_vulns) == 1, "Failed to detect SQL injection vulnerability"
        
        # Should detect command injection
        cmd_vulns = [v for v in vulnerabilities if "command injection" in v.description.lower()]
        assert len(cmd_vulns) == 1, "Failed to detect command injection vulnerability"
        
        # Verify vulnerability details
        for vuln in vulnerabilities:
            assert vuln.severity in ["critical", "high", "medium", "low"]
            assert vuln.file_path == "test.py"
            assert vuln.line_number > 0
            assert vuln.recommendation

    def test_configuration_vulnerability_detection(self, scanner: VulnerabilityScanner):
        test_config = {
            "security": {
                "tls_version": "1.1",
                "access_control": {
                    "enabled": False
                }
            }
        }
        
        vulnerabilities = scanner.scan_configuration(test_config)
        
        # Should detect outdated TLS version
        tls_vulns = [v for v in vulnerabilities if "tls" in v.description.lower()]
        assert len(tls_vulns) == 1, "Failed to detect outdated TLS version"
        assert tls_vulns[0].severity == "high"
        
        # Should detect missing access control
        access_vulns = [v for v in vulnerabilities if "access control" in v.description.lower()]
        assert len(access_vulns) == 1, "Failed to detect missing access control"
        assert access_vulns[0].severity == "high"

    def test_dependency_vulnerability_detection(self, scanner: VulnerabilityScanner):
        test_dependencies = {
            "requests": "2.24.0",  # Below minimum
            "cryptography": "3.4.0",  # At minimum
            "insecure-crypto": "1.0.0"  # Banned package
        }
        
        vulnerabilities = scanner.scan_dependencies(test_dependencies)
        
        # Should detect banned package
        banned_vulns = [v for v in vulnerabilities if "banned" in v.description.lower()]
        assert len(banned_vulns) == 1, "Failed to detect banned package"
        
        # Should detect outdated package
        version_vulns = [v for v in vulnerabilities if "version" in v.description.lower()]
        assert len(version_vulns) == 1, "Failed to detect outdated package version"
        
        # Should not flag package at minimum version
        crypto_vulns = [v for v in vulnerabilities if "cryptography" in str(v.description).lower()]
        assert not crypto_vulns, "Incorrectly flagged package at minimum version"

    def test_security_report_generation(self, scanner: VulnerabilityScanner):
        # Create test scan result
        vulnerabilities = [
            SecurityVulnerability(
                severity="critical",
                category="code",
                description="Critical vulnerability",
                file_path="test.py",
                line_number=10,
                recommendation="Fix critical issue",
                timestamp=datetime.now()
            ),
            SecurityVulnerability(
                severity="high",
                category="configuration",
                description="High severity issue",
                file_path=None,
                line_number=None,
                recommendation="Fix configuration",
                timestamp=datetime.now()
            )
        ]
        
        scan_result = ScanResult(
            vulnerabilities=vulnerabilities,
            scan_duration=1.5,
            files_scanned=10,
            rules_checked=20,
            timestamp=datetime.now()
        )
        
        report = scanner.generate_security_report(scan_result)
        
        # Verify report structure
        assert "summary" in report
        assert "vulnerability_counts" in report
        assert "findings" in report
        assert "recommendations" in report
        
        # Verify vulnerability counts
        assert report["vulnerability_counts"]["critical"] == 1
        assert report["vulnerability_counts"]["high"] == 1
        
        # Verify risk score calculation
        assert "risk_score" in report["summary"]
        assert 0 <= report["summary"]["risk_score"] <= 100
        
        # Verify recommendations
        assert len(report["recommendations"]["critical"]) == 1
        assert len(report["recommendations"]["high"]) == 1